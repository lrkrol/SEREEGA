% lf = lf_generate_frombrainstorm(varargin)
%
%    Convert a Brainstorm headmodel into a format usable by SEREEGA. It
%    supports surface, volume and mixed headmodels.
%
%    You will need the complete filepath of the  relevant headmodel .mat 
%    files (PATH_TO_FILE/file_name.mat) produced by Brainstorm:
%        - Channel location structure
%        - Subject T1 image structure
%        - Headmodel file structure
%        - atlas file structure (if used and wanted)
%
%    Assumes that Brainstorm and EEGLAB are in the path, as it uses the
%    functions:
%        - cs_convert (Brainstorm): convert coordinates from
%          Subject-Coordinate-System (SCS) to MNI coordinate system. 
%        - readlocs (EEGLAB): read channel location
%
%    By default, this function uses Brainstorm default anatomy (ICBM152),
%    which was used to generate the BEM surfaces. These were then used to
%    compute the leadfield through OpenMEEG and costraining the dipoles to
%    the cortex surface. The electrodes template is the already
%    co-registered EGI GSN HydroCel 256 E1 template. Finally, the default
%    atlas provided is the Mindboggle atalas. Please cite Brainstorm,
%    OpenMEEG and Mindboggle if using this default files (see function
%    content).
%
% Options:
%    chanloc:   - path + filename (.mat) of the channel location file used
%                 in Brainstorm to create the headmodel. You should find
%                 this file in:
%                 brainstorm_db\PROTOCOLNAME\data\SUBJECTNAME\@intra
%                 Otherwise you can open the protocol in Brainstorm and do:
%                 Functional Data>>Subject>>Intra-subject>>right click on
%                 the channel>>File>>Show in File Explorer
%    t1         - path + filename (.mat) of the structural T1 image used in 
%                 Brainstorm to compute the headmodel. The location of the
%                 file depends on whether you used the default anatomy or a
%                 subject-specific anatomy. You can find the file by:
%                 Anaotmy>>Subject>>right click on the T1 image
%                 (deafult=MRI:ICBM152)>>File>>Show in File Explorer
%    headmodel  - path + filename (.mat) of the headmodel (leadfield)
%                 generated by Brainstorm. You should find this file in:
%                 brainstorm_db\PROTOCOLNAME\data\SUBJECTNAME\@intra
%                 Otherwise you can open the protocol in Brainstorm and do:
%                 Functional Data>>Subject>>Intra-subject>>right click on
%                 the headmodel>>File>>Show in File Explorer
%    atlas      - This file is optional and you should use it if you wish
%                 to import an atlas that has been applied to the headmodel
%                 in Brainstorm. Depending on the type of headmodel created
%                 (surface, volume or mixed) and how the atlas has been
%                 loaded and applied, there are different ways to retrieve
%                 the atlas. For consistency, please follow these
%                 instructions, which apply independently from the type of
%                 headmodel. With the protocol open in Brainstorm:
%                 Functional Data>>Subject>>Intra-subject>>Right click on
%                 the headmodel>>View EEG leadfield vectors>>Scout (on the
%                 right panel)>>Select the scout you desire/created>>Click
%                 on the save button (floppy disk) on the right of the
%                 window Provide the path + filename (.mat)
%    scaleUnits - Logical (0|1) whether you want to convert the leadfield
%                 from Brainstorm V/A-m to microV/nA-m, should be easier to
%                 work with. Default: 1
%    useMm      - Logical (0|1) whether you want to the dipole and
%                 electrode position converted from meters to millimeters.
%                 Millimeters could be a better option for two reasons.
%                 Firstly, are used by the other leadfields included in
%                 SEREEGA. Secondly, plot_headmodel will display the
%                 electrode lables only when mm are used. Default: 1
%    useMNI     - Logical (0|1) whether you want to convert from the
%                 Subject-Coordinate-System (SCS) used in Brainstorm to the 
%                 MNI coordinate system. Note that the plotting functions
%                 presuppose MNI coordinates. If SCS is used, the plots
%                 will be off, but this won't affect the simulated
%                 activity. Default: 1. 
%
%
% Usage example:
%        >> lf = lf_generate_frombrainstorm() %To use the defaults
%        >> lf = lf_convert_frombrainstorm('chanloc', 'my_chanloc.mat', ...
%                                          't1', 'my_t1_image.mat', ...
%                                          'headmodel', 'my_headmodel.mat',
%                                          'atlas', 'my_atlas.mat',
%                                          'scaleUnits', 0,
%                                          'useMm', 0,
%                                          'useMNI', 0)

% Function cs_convert and default headmodel provided are part of Brainstorm
% Tadel F, Baillet S, Mosher JC, Pantazis D, Leahy RM (2011) Brainstorm: A
% User-Friendly Application for MEG/EEG Analysis Computational Intelligence
% and Neuroscience, vol. 2011, Article ID 879716, 13 pages, 2011.
% doi:10.1155/2011/879716
%
% Function readlocs is part of EEGLAB Delorme A & Makeig S (2004) EEGLAB:
% an open-source toolbox for analysis of single-trial EEG dynamics, Journal
% of Neuroscience Methods 134:9-21. 
%
% Headmodel created using OpenMEEG
% Gramfort A, Papadopoulo T, Olivi E, Clerc M
% OpenMEEG: opensource software for quasistatic bioelectromagnetics
% BioMedical Engineering OnLine 45:9, 2010
% 
% Kybic J, Clerc M, Abboud T, Faugeras O, Keriven R, Papadopoulo T (2005) A
% common formalism for the integral formulations of the forward EEG problem
% IEEE Transactions on Medical Imaging, 24:12-28, 
%
% Atlas included: Mindboggle Klein A, Ghosh SS, Bao FS, Giard J, Hame Y,
% Stavsky E, Lee N, Rossa B, Reuter M, Neto EC, Keshavan A. (2017)
% Mindboggling morphometry of human brains. PLoS Computational Biology
% 13(3): e1005350. doi:10.1371/journal.pcbi.1005350
%
% Version:
%    - First version: 2022/12/03
% 
% Author: Daniele Scanzi
%
%     Copyright (C) <2022>  <Daniele Scanzi>
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful, but
%     WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%     General Public License for more details
%     (https://www.gnu.org/licenses).

function lf = lf_generate_frombrainstorm(varargin)

% parsing input
p = inputParser;

addParameter(p, 'chanloc', 'channel_GSN_HydroCel_256_E1.mat', @ischar)  %Channel location file name
addParameter(p, 't1', 'subjectimage_T1.mat', @ischar)                   %T1 image for coordinates conversion
addParameter(p, 'headmodel', 'headmodel_surf_openmeeg.mat', @ischar)    %Headmodel generated in Brainstorm
addParameter(p, 'atlas', [], @ischar)                                   %Name of the specific atlas to use (Cortex file could have more than 1)
addParameter(p, 'scaleUnits', 1, @isnumeric);                           %Scale units from V/A-m to microV/nA-m
addParameter(p, 'useMm', 1, @isnumeric);                                %Convert all lengths from meters to mm
addParameter(p, 'useMNI', 1, @isnumeric);                               %Convert units to MNI coordinates

parse(p, varargin{:});

chanloc      = p.Results.chanloc;
t1           = p.Results.t1;
hm           = p.Results.headmodel;
bsAtlas      = p.Results.atlas;
scaleUnits   = p.Results.scaleUnits;
useMm        = p.Results.useMm;
useMNI       = p.Results.useMNI;

%% Load required data

% Display useful information to user
fprintf('Using channel file: %s \nUsing T1 image file: %s \nUsing Brainstorm headmodel file: %s\n', chanloc, t1, hm);

% Channel location
if ~exist(chanloc, 'file')
     error('SEREEGA:lf_generate_frombrainstorm:fileNotFound', ...
         ['Could not find channel location file: %s' ...
         '\nMake sure you provided the correct path and filename.\n'], chanloc)
else
    channels = readlocs(chanloc);
end

% T1 data used in Brainstorm
if ~exist(t1, 'file')
    error('SEREEGA:lf_generate_frombrainstorm:fileNotFound', ...
        ['Could not find T1 image file: %s' ...
        '\nMake sure you provided the correct path and filename.\n'], t1)
else
    t1Image = load(t1);
end

% Brainstorm head model (leadfield)
if ~exist(hm, 'file')
    error('SEREEGA:lf_generate_frombrainstorm:fileNotFound', ...
        ['Could not find headmodel file: %s' ...
        '\nMake sure you provided the correct path and filename.\n'], hm)
else
    bsLeadField = load(hm);
end

% If an atlas has been specified, load it
if ~isempty(bsAtlas)

    if ~exist(bsAtlas,'file')
        error(['SEREEGA:lf_generate_frombrainstorm:fileNotFound ' ...
            'Could not find the atlas file: %s' ...
            '\nMake sure you provided the correct path and filename.\n'], bsAtlas)
    else
        scouts = load(bsAtlas, 'Scouts');
        % Extract only the requested atlas by its name
        atlas  = atlas_bs_to_cell(scouts.Scouts);
    end
end

%% Convert from Brainstrom format (2D) to Sereega format (3D)
% First convert the 2D leadfield from Brainstorm into a 3D matrix (XYZ
% coordinates)
% Extract X-Y-Z dimensions
xdim = bsLeadField.Gain(:, 1:3:size(bsLeadField.Gain,2)); %X dim is in columns 1-4-7-10-etc...
ydim = bsLeadField.Gain(:, 2:3:size(bsLeadField.Gain,2)); %X dim is in columns 2-5-8-11-etc...
zdim = bsLeadField.Gain(:, 3:3:size(bsLeadField.Gain,2)); %X dim is in columns 3-6-9-12-etc...

%% Convert to MNI coordinates if required
if useMNI
    % Save in 3D matrix
    % Note1: that the X-Y-Z dimensions of the leadfield are in the SCS system
    % used by Brainstorm. However, here we will transform everything in the MNI
    % coordinate system. Thus, we need to account for this here too, otherwise
    % the leadfiled will project onto the wrong surface. The SCS system has the
    % X-axis pointing towards the nose and the Y-axis pointing towards LPA. The
    % MNI coordinate system has the X-axis pointing towards RPA and the Y-axis
    % towards the nose. 
    % Note2: The rotation applied here is not the same as the rotation applied
    % to the channels to account for the EEGLAB rotation. In that case, we will
    % go from MNI to EEGLAB. 
    lf3D = cat(3, -ydim, xdim, zdim);


% Convert leadfiled dipole position and orientation to MNI coordinates

    fprintf('Converting dipole locations from Brainstorm Subject Coordinate System (SCS) to MNI system\n');
    
    try
        % Dipoles
        gridLocMNI = cs_convert(t1Image, 'scs', 'mni', bsLeadField.GridLoc);    %Location

    catch 
        error(['SEREEGA:lf_generate_frombrainstorm:UndefinedFunction: Could not use cs_convert. Please, be sure to add Brainstorm to your path. ' ...
            'Hint, you can start brainstorm before running this function.']);
    end
    
    % Check if the dipoles are oriented, if not, set their values to 0
    if isempty(bsLeadField.GridOrient)
        gridOriMNI = zeros(size(gridLocMNI));
    else
        % Use the provided perpendicular orientations, but rotate them to
        % account for the switch from SCS to MNI coordinate system (see
        % note above)
        gridOriMNI(:,1) = -bsLeadField.GridOrient(:,2);
        gridOriMNI(:,2) = bsLeadField.GridOrient(:,1);
        gridOriMNI(:,3) = bsLeadField.GridOrient(:,3);
    end
    % Channels
    fprintf('Converting channel location from SCS system to MNI system and readjusting for EEGLAB coordinate rotation (X=Y, Y=-X)\n')
    channelsMNI = channels;
    for ch = 1:length(channels)
        % Convert XYZ EEGLAB coordinates into MNI coordinates. This will rotate
        % the coordinates so that Xmni = -Yeeglab, Ymni = Xeeglab
        xyzMNI = cs_convert(t1Image, 'scs', 'mni', [[channels(ch).X], [channels(ch).Y], [channels(ch).Z]]);
        
        % Reassign the MNI coordinates to the channel structure. SEREEGA
        % expects the channels to be in the EEGLAB fomat, thus we need to
        % rotate them 
        channelsMNI(ch).X = xyzMNI(2);
        channelsMNI(ch).Y = -xyzMNI(1);
        channelsMNI(ch).Z = xyzMNI(3);
    end
    
    % Recompute spherical and besa coordinates 
    channelsMNI = convertlocs(channelsMNI);
    
    % If the fiducials are saved with the other channels, remove them (they are
    % not included in the leadfield)
    fiducials = { 'nz' 'lpa' 'rpa' 'nasion' 'left' 'right' 'nazion' 'fidnz' 'fidt9' 'fidt10' 'cms' 'drl' 'nas' 'lht' 'rht' 'lhj' 'rhj' };
    fiducialIdx = find(ismember(lower({channelsMNI.labels}), fiducials));
    
    if length(fiducialIdx)
        channelsMNI(fiducialIdx) = [];
    end
    
    %% Scale units if requested
    
    % Dipole  and channels (NOTE: the MNI coordinate system shoukd be in mm.
    % However, the cs_convert function returns the results in meters, as this
    % is Brainstorm default). 
    if useMm
        fprintf('Converting dipole and channel location from M to mm\n')
        % Dipole location
        gridLocMNI = gridLocMNI * 1000;
        
        % Electrode XYZ Location
        for ch = 1:length(channelsMNI)
            channelsMNI(ch).X = channelsMNI(ch).X * 1000;
            channelsMNI(ch).Y = channelsMNI(ch).Y * 1000;
            channelsMNI(ch).Z = channelsMNI(ch).Z * 1000;
        end
        % Recompute spherical and besa coordinates 
        channelsMNI = convertlocs(channelsMNI);
    end
        
    % Leadfield from Brainstorm V/A-m to microV/nA-m
    if scaleUnits 
        fprintf('Converting leadfield from Brainstorm default V/A-m to microV/nA-m\n')
        lf3D = lf3D * 1e-3;
    end

    % Create leadfield structure for sereega
    lf = struct();
    lf.leadfield   = lf3D;
    lf.orientation = gridOriMNI;
    lf.pos         = gridLocMNI;
    lf.chanlocs    = channelsMNI;
    % Add atlas if it exists or add Brain to all dipoles
    if exist('atlas', 'var')
        lf.atlas = strcat('Brain', {' '}, atlas);

        % If a dipole had no label assigned in the atlas, the line
        % above will add "Brain ", which will be converted by 
        % utl_sanitize_atlas in "Brain_". So, remove the final space to
        % leave just "Brain"
        defaultLabelIdx = find(strcmp(lf.atlas, 'Brain '));
        if ~isempty(defaultLabelIdx)
            lf.atlas(defaultLabelIdx) = {'Brain'};
        end

        lf.atlas = utl_sanitize_atlas(lf.atlas);
    else
        lf.atlas = repmat({'Brain'}, size(lf.pos, 1), 1);
    end

%% Use SCS if conversion to MNI was not required
else
    % Switch leadfield gain coordinates to accountf for EEGLAB rotation of
    % the channels
    lf3D    = cat(3, xdim, ydim, zdim);

    % Switch dipole coordinates to account for EEGLAB rotation of the
    % channels
    gridLoc  = [bsLeadField.GridLoc(:,1), bsLeadField.GridLoc(:,2), bsLeadField.GridLoc(:,3)];

     % Check if the dipoles are oriented, if not, set their values to 0
        if isempty(bsLeadField.GridOrient)
            gridOri = zeros(size(gridLoc));
        else
            % Use the provided perpendicular orientations and rotate them
            % to account for EEGLAB rotation of the channels
            
            gridOri(:,1) = bsLeadField.GridOrient(:,1);
            gridOri(:,2) = bsLeadField.GridOrient(:,2);
            gridOri(:,3) = bsLeadField.GridOrient(:,3);
        end

    % If the fiducials are saved with the other channels, remove them (they are
    % not included in the leadfield)
    fiducials = { 'nz' 'lpa' 'rpa' 'nasion' 'left' 'right' 'nazion' 'fidnz' 'fidt9' 'fidt10' 'cms' 'drl' 'nas' 'lht' 'rht' 'lhj' 'rhj' };
    fiducialIdx = find(ismember(lower({channels.labels}), fiducials));
    
    if length(fiducialIdx)
        channels(fiducialIdx) = [];
    end

    % Rotate channels to account for EEGLAB Y=-X and X=Y roattion. After
    % the rotation the channels will be alligned to the SCS used in
    % Brainstorm
     originalX = {channels.X};                             %Original X coordinates
     originalY = {channels.Y};                             %Original Y coordinates
     newY      = cellfun(@(x) x*(-1), originalX, 'un', 0); %Y = -X
 
     [channels.X] = originalY{:};
     [channels.Y] = newY{:};

    % If requested, convert all the measures from m (as provided by
    % Brainstorm) to mm
    if useMm
        fprintf('Converting dipole and channel location from M to mm\n')
        % Dipole location
        gridLoc = gridLoc * 1000;

        % Electrode XYZ Location
        for ch = 1:length(channels)
            channels(ch).X = channels(ch).X * 1000;
            channels(ch).Y = channels(ch).Y * 1000;
            channels(ch).Z = channels(ch).Z * 1000;
        end
        % Recompute spherical and besa coordinates 
        channels = convertlocs(channels);
    end

    % Leadfield from Brainstorm V/A-m to microV/nA-m
    if scaleUnits 
        fprintf('Converting leadfield from Brainstorm default V/A-m to microV/nA-m\n')
        lf3D = lf3D * 1e-3;
    end

    % Create leadfield structure for sereega
    lf = struct();
    lf.leadfield   = lf3D;
    lf.orientation = gridOri;
    lf.pos         = gridLoc;
    lf.chanlocs    = channels;
    % Add atlas if it exists or add Brain to all dipoles
    if exist('atlas', 'var')
        lf.atlas = strcat('Brain', {' '}, atlas);

        % If a dipole had no label assigned in the atlas, the line
        % above will add "Brain ", which will be converted by 
        % utl_sanitize_atlas in "Brain_". So, remove the final space to
        % leave just "Brain"
        defaultLabelIdx = find(strcmp(lf.atlas, 'Brain '));
        if ~isempty(defaultLabelIdx)
            lf.atlas(defaultLabelIdx) = {'Brain'};
        end

        lf.atlas = utl_sanitize_atlas(lf.atlas);
    else
        lf.atlas = repmat({'Brain'}, size(lf.pos, 1), 1);
    end
    
end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%% Helper functions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Convert the atlas from brainstorm structure to a simple Nsources X 1 cell
function a = atlas_bs_to_cell(brainstormAtlas)
  
    % Find number of labels
    maxIdx = 0;
    for i = 1:length(brainstormAtlas)
        currentMax = max(brainstormAtlas(i).Vertices);
        if currentMax > maxIdx
            maxIdx = currentMax;
        end
    end

    % Initialise cell array for labels
    a = cell(maxIdx, 1);

    % Find what label each dipole Idx has got and store them in order
    for d = 1:maxIdx
        % Find where the current dipole is and store its label
        for l = 1:length(brainstormAtlas)
            if any(brainstormAtlas(l).Vertices == d)
                a{d} = brainstormAtlas(l).Label;
                break
            end
        end
    end


    % If there are any empty rows, it is likely that the headmodel is a
    % volume headmodel and the atlas does not cover all the posible
    % dipoles. Let the user know this.
    if any(cellfun(@isempty,a))
        warning([ ...
            'Not all dipoles have an associated atlas label.\n' ...
            'This could happen when the atlas is made up of scouts that do not cover all the areas covered by the dipoles.\n' ...
            'Dipoles not associated with a label will be labelled by default as "Brain_Unknown"'], '');

        emptyIdx    = find(cellfun(@isempty,a));
        % Brain will be added during the cration of the leadfield
        a(emptyIdx) = {'Unknown'};
    end
end









